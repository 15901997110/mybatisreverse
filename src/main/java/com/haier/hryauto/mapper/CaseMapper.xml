<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.haier.hryauto.mapper.CaseMapper">
  <resultMap id="BaseResultMap" type="com.haier.hryauto.po.Case">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="caseName" jdbcType="VARCHAR" property="casename" />
    <result column="remark" jdbcType="VARCHAR" property="remark" />
    <result column="iId" jdbcType="INTEGER" property="iid" />
    <result column="requestParam" jdbcType="VARCHAR" property="requestparam" />
    <result column="assertType" jdbcType="CHAR" property="asserttype" />
    <result column="expected" jdbcType="VARCHAR" property="expected" />
    <result column="status" jdbcType="SMALLINT" property="status" />
    <result column="author" jdbcType="VARCHAR" property="author" />
    <result column="updateTime" jdbcType="TIMESTAMP" property="updatetime" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, caseName, remark, iId, requestParam, assertType, expected, status, author, updateTime
  </sql>
  <select id="selectByExample" parameterType="com.haier.hryauto.po.CaseExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from case
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from case
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from case
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.haier.hryauto.po.CaseExample">
    delete from case
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.haier.hryauto.po.Case">
    insert into case (id, caseName, remark, 
      iId, requestParam, assertType, 
      expected, status, author, 
      updateTime)
    values (#{id,jdbcType=INTEGER}, #{casename,jdbcType=VARCHAR}, #{remark,jdbcType=VARCHAR}, 
      #{iid,jdbcType=INTEGER}, #{requestparam,jdbcType=VARCHAR}, #{asserttype,jdbcType=CHAR}, 
      #{expected,jdbcType=VARCHAR}, #{status,jdbcType=SMALLINT}, #{author,jdbcType=VARCHAR}, 
      #{updatetime,jdbcType=TIMESTAMP})
  </insert>
  <insert id="insertSelective" parameterType="com.haier.hryauto.po.Case">
    insert into case
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="casename != null">
        caseName,
      </if>
      <if test="remark != null">
        remark,
      </if>
      <if test="iid != null">
        iId,
      </if>
      <if test="requestparam != null">
        requestParam,
      </if>
      <if test="asserttype != null">
        assertType,
      </if>
      <if test="expected != null">
        expected,
      </if>
      <if test="status != null">
        status,
      </if>
      <if test="author != null">
        author,
      </if>
      <if test="updatetime != null">
        updateTime,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=INTEGER},
      </if>
      <if test="casename != null">
        #{casename,jdbcType=VARCHAR},
      </if>
      <if test="remark != null">
        #{remark,jdbcType=VARCHAR},
      </if>
      <if test="iid != null">
        #{iid,jdbcType=INTEGER},
      </if>
      <if test="requestparam != null">
        #{requestparam,jdbcType=VARCHAR},
      </if>
      <if test="asserttype != null">
        #{asserttype,jdbcType=CHAR},
      </if>
      <if test="expected != null">
        #{expected,jdbcType=VARCHAR},
      </if>
      <if test="status != null">
        #{status,jdbcType=SMALLINT},
      </if>
      <if test="author != null">
        #{author,jdbcType=VARCHAR},
      </if>
      <if test="updatetime != null">
        #{updatetime,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.haier.hryauto.po.CaseExample" resultType="java.lang.Long">
    select count(*) from case
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update case
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.casename != null">
        caseName = #{record.casename,jdbcType=VARCHAR},
      </if>
      <if test="record.remark != null">
        remark = #{record.remark,jdbcType=VARCHAR},
      </if>
      <if test="record.iid != null">
        iId = #{record.iid,jdbcType=INTEGER},
      </if>
      <if test="record.requestparam != null">
        requestParam = #{record.requestparam,jdbcType=VARCHAR},
      </if>
      <if test="record.asserttype != null">
        assertType = #{record.asserttype,jdbcType=CHAR},
      </if>
      <if test="record.expected != null">
        expected = #{record.expected,jdbcType=VARCHAR},
      </if>
      <if test="record.status != null">
        status = #{record.status,jdbcType=SMALLINT},
      </if>
      <if test="record.author != null">
        author = #{record.author,jdbcType=VARCHAR},
      </if>
      <if test="record.updatetime != null">
        updateTime = #{record.updatetime,jdbcType=TIMESTAMP},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update case
    set id = #{record.id,jdbcType=INTEGER},
      caseName = #{record.casename,jdbcType=VARCHAR},
      remark = #{record.remark,jdbcType=VARCHAR},
      iId = #{record.iid,jdbcType=INTEGER},
      requestParam = #{record.requestparam,jdbcType=VARCHAR},
      assertType = #{record.asserttype,jdbcType=CHAR},
      expected = #{record.expected,jdbcType=VARCHAR},
      status = #{record.status,jdbcType=SMALLINT},
      author = #{record.author,jdbcType=VARCHAR},
      updateTime = #{record.updatetime,jdbcType=TIMESTAMP}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.haier.hryauto.po.Case">
    update case
    <set>
      <if test="casename != null">
        caseName = #{casename,jdbcType=VARCHAR},
      </if>
      <if test="remark != null">
        remark = #{remark,jdbcType=VARCHAR},
      </if>
      <if test="iid != null">
        iId = #{iid,jdbcType=INTEGER},
      </if>
      <if test="requestparam != null">
        requestParam = #{requestparam,jdbcType=VARCHAR},
      </if>
      <if test="asserttype != null">
        assertType = #{asserttype,jdbcType=CHAR},
      </if>
      <if test="expected != null">
        expected = #{expected,jdbcType=VARCHAR},
      </if>
      <if test="status != null">
        status = #{status,jdbcType=SMALLINT},
      </if>
      <if test="author != null">
        author = #{author,jdbcType=VARCHAR},
      </if>
      <if test="updatetime != null">
        updateTime = #{updatetime,jdbcType=TIMESTAMP},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.haier.hryauto.po.Case">
    update case
    set caseName = #{casename,jdbcType=VARCHAR},
      remark = #{remark,jdbcType=VARCHAR},
      iId = #{iid,jdbcType=INTEGER},
      requestParam = #{requestparam,jdbcType=VARCHAR},
      assertType = #{asserttype,jdbcType=CHAR},
      expected = #{expected,jdbcType=VARCHAR},
      status = #{status,jdbcType=SMALLINT},
      author = #{author,jdbcType=VARCHAR},
      updateTime = #{updatetime,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>